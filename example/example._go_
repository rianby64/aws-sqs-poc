package main

import (
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/sqs"

	queue "github.com/rianby64/aws-sqs-poc"
)

// NewAWSSession - Creates a new AWS session.
func NewAWSSession() (*session.Session, error) {
	credsValue := credentials.Value{
		AccessKeyID:     "--",
		SecretAccessKey: "--",
	}

	creds := credentials.NewStaticCredentialsFromCreds(credsValue)
	_, err := creds.Get()

	if err != nil {
		return nil, err
	}

	return session.NewSession(&aws.Config{
		Credentials: creds,
		Region:      aws.String("us-east-1"),
	})
}

// main it is
func main() {
	myhandler := func(msg interface{}) error {
		fmt.Println(msg)
		return nil
	}

	awssession, _ := NewAWSSession()
	sqssession := sqs.New(awssession)
	myq := queue.NewSQSQueue(sqssession, "https://sqs.us-east-1.amazonaws.com/490043543248/my-queue-test")
	myq.Register("my-method", myhandler)

	go myq.Listen("listen a-4")
	go myq.Listen("listen b-4")
	go myq.Listen("listen c-4")

	for i := 0; i < 10; i++ {
		if err := myq.PutString("my-method", fmt.Sprintf("my-string-to-process-in-the-queue-%d", i), 0); err != nil {
			fmt.Println(err)
		}

		time.Sleep(time.Second)
	}

	time.Sleep(time.Hour)
}
